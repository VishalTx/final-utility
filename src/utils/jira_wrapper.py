from __future__ import annotations

from utils.config_wrapper import ConfigWrapper
import json
import requests
from requests.auth import HTTPBasicAuth

def text_to_adf(text):
    """
    Converts plain text to Atlassian Document Format (ADF) JSON.
    Supports multiple lines as separate paragraphs.
    """
    paragraphs = text.splitlines()
    adf_content = []

    for paragraph in paragraphs:
        if paragraph.strip():  # Skip empty lines
            adf_content.append({
                "type": "paragraph",
                "content": [
                    {
                        "type": "text",
                        "text": paragraph
                    }
                ]
            })

    return {
        "type": "doc",
        "version": 1,
        "content": adf_content or [
            {
                "type": "paragraph",
                "content": []
            }
        ]
    }

def log_defect(summary, description):
    return True
    config = ConfigWrapper()
    email = config.getenv('Email_id')
    api_token = config.getenv('Jira_Api_Token')
    project = config.getenv('Jira_Project')

    payload = {
        "fields": {
            "project": {
                "key": project
            },
            "summary": summary,
            "description": text_to_adf(description),
            "issuetype": {
                "name": "Bug"
            },
            "customfield_18335":text_to_adf("Autogenerated"),
            "customfield_18336":text_to_adf("Autogenerated"),
            "customfield_18326":[{"value":"QA"}],
            "customfield_18327":{"self":"https://deluxe.atlassian.net/rest/api/2/customFieldOption/18940","value":"Sev 1"}
        }
    }

    JIRA_URL = config.getenv('Jira_URL')
    HEADERS = {
        'Content-Type': 'application/json',
    }
    response = requests.post(
        JIRA_URL,
        headers=HEADERS,
        auth=HTTPBasicAuth(email, api_token),
        data=json.dumps(payload)
    )

    if response.status_code == 201:
        print(f"Issue created successfully! Issue key: {response.json()['key']}")
        return response.json()['key']
    else:
        print(f"Failed to create issue: {response.status_code}, {response.text}")
        return False

if __name__ == "__main__":
    log_defect('AUTOMATION UTILITY: Testing Bug Logging', 'This bug is generated for testing purpose.')
